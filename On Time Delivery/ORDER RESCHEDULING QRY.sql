SELECT
    RES.RESCHD_DT,
    RES.PBU_NBR,
    SUM( RES.BACK_ORDER_QTY ) AS BACK_ORDER_QTY,
    SUM( RES.UNCONFIRMED_QTY ) AS UNCONFIRMED_QTY,
    SUM( RES.OPEN_CONFIRMED_QTY ) AS OPEN_CONFIRMED_QTY,
    SUM( RES.OTHER_OPEN_QTY ) AS OTHER_OPEN_QTY,
    SUM( RES.TOT_CNFRM_QTY ) AS TOTAL_CONFIRMED_QTY,
    SUM( RES.TOT_RESCHD_CNFRM_QTY ) AS TOT_RESCHD_CNFRM_QTY,
    SUM( RES.DELIV_BLK_QTY ) AS DELIV_BLK_QTY,
    SUM( RES.POLICY_QTY ) AS POLICY_QTY,
    SUM( RES.MAD_IN_PAST_MAN_QTY ) AS MAD_IN_PAST_MAN_QTY,
    SUM( RES.MAD_IN_PAST_SUPPLY_QTY ) AS MAD_IN_PAST_SUPPLY_QTY,
    SUM( RES.SUM_QTY_DECREASED ) AS SUM_QTY_DECREASED,
    SUM( RES.SUM_QTY_INCREASED ) AS SUM_QTY_INCREASED,
    SUM( RES.DATE_IMPROVED_QTY ) AS DATE_IMPROVED_QTY,
    SUM( RES.DATE_PUSH_QTY ) AS DATE_PUSH_QTY,
    SUM( RES.ADDED_QTY ) AS ADDED_QTY,
    SUM( RES.DELETED_QTY ) AS DELETED_QTY,
    SUM( RES.CNFRM_DECR_QTY ) AS CNFRM_DECR_QTY,
    SUM( RES.CNFRM_INCR_QTY ) AS CNFRM_INCR_QTY,
    SUM( RES.CONFIRM_DATE_IMPR_QTY ) AS CONFIRM_DATE_IMPR_QTY,
    SUM( RES.CONFIRM_DATE_PUSH_QTY ) AS CONFIRM_DATE_PUSH_QTY,
    SUM( RES.ADJ_CONFIRM_DATE_PUSH_QTY ) AS ADJ_CONFIRM_DATE_PUSH_QTY,
    SUM( RES.ADJ_DELIV_BLK_QTY ) AS ADJ_DELIV_BLK_QTY,
    SUM( RES.ADJ_POLICY_QTY ) AS ADJ_POLICY_QTY,
    SUM( RES.ADJ_MAD_IN_PAST_MAN_QTY ) AS ADJ_MAD_IN_PAST_MAN_QTY,
    SUM( RES.ADJ_MAD_IN_PAST_SUPPLY_QTY ) AS ADJ_MAD_IN_PAST_SUPPLY_QTY

FROM (

SELECT
    -- ORDER KEY
    R.ORDER_ID,
    R.ORDER_LINE_NBR,

    -- SHIP TO FOREIGN KEY & COMMON OWNER
    R.CMN_OWN_CUST_ID,
    R.SHIP_TO_CUST_ID,

    -- MATERIAL DETAILS
    R.MATL_ID,
    R.PBU_NBR,

    -- NEW CATEGORIES
    R.DOC_TYP_CD,
    R.TRANS_UPD_CD,
    R.SRC_UPD_USR_ID,

    -- DELIV BLOCKS AT SCHED LINE AND ORDER HEADER
    MAX( SDSL.SCHD_LN_DELIV_BLK_CD ) AS SCHED_LINE_DELIV_BLK_CD,
    MAX( SD.DELIV_BLK_CD ) AS HEADER_DELIV_BLK_CD,

    -- COUNT OF SCHEDULE LINES & MOST IMPORTANT DATES
    COUNT( R.SCHED_LINE_NBR ) AS SCHED_LINE_CNT,
    R.RESCHD_DT,
    R.PRIOR_DY_RESCHD_DT,

    -- MAX / MIN OF DATES FOR ORDER LINE LEVEL LOGIC
    MAX( R.PLN_MATL_AVAIL_DT ) AS MAX_PLN_MAD,
    MAX( R.RESCHD_MATL_AVAIL_DT ) AS MAX_RESCHD_MAD,
    MIN( R.PLN_DELIV_DT ) AS MIN_PLN_DELIV_DT,
    MAX( R.PLN_DELIV_DT ) AS MAX_PLN_DELIV_DT,
    MIN( R.RESCHD_DELIV_DT ) AS MIN_RESCHD_PLN_DELIV_DT,
    MAX( R.RESCHD_DELIV_DT ) AS MAX_RESCHD_PLN_DELIV_DT,
    MAX( CASE
        WHEN R.RESCHD_MATL_AVAIL_DT IS NULL
            THEN R.PLN_MATL_AVAIL_DT
    END ) AS MAX_DATE_QTY_DELETED,
    MAX( CASE
        WHEN R.PLN_MATL_AVAIL_DT IS NULL
            THEN R.RESCHD_MATL_AVAIL_DT
    END ) AS MAX_DATE_QTY_ADDED,
    MAX( CASE
        WHEN R.RESCHD_MATL_AVAIL_DT IS NOT NULL AND R.PLN_MATL_AVAIL_DT IS NOT NULL AND R.CNFRM_QTY > R.RESCHD_CNFRM_QTY
            THEN R.RESCHD_MATL_AVAIL_DT
    END ) AS MAX_DATE_QTY_DECREASED,
    MAX( CASE
        WHEN R.RESCHD_MATL_AVAIL_DT IS NOT NULL AND R.PLN_MATL_AVAIL_DT IS NOT NULL AND R.CNFRM_QTY < R.RESCHD_CNFRM_QTY
            THEN R.RESCHD_MATL_AVAIL_DT
    END ) AS MAX_DATE_QTY_INCREASED,

    -- SUM OF QUANTITY BASED ON DIFFERENT FACTORS FOR ORDER LINE LEVEL LOGIC
    OO.BACK_ORD_QTY AS BACK_ORDER_QTY,
    OO.UNCNFRM_QTY AS UNCONFIRMED_QTY,
    OO.OPEN_CNFRM_QTY AS OPEN_CONFIRMED_QTY,
    OO.OTHR_OPEN_QTY AS OTHER_OPEN_QTY,
    SUM( R.CNFRM_QTY ) AS TOT_CNFRM_QTY,
    SUM( R.RESCHD_CNFRM_QTY ) AS TOT_RESCHD_CNFRM_QTY,
    SUM( CASE
        WHEN ( SDSL.SCHD_LN_DELIV_BLK_CD IS NOT NULL OR SD.DELIV_BLK_CD IS NOT NULL ) AND R.PLN_MATL_AVAIL_DT < R.RESCHD_DT AND SDSL.SCHD_LN_DELIV_BLK_CD <> 'YF'
            THEN R.CNFRM_QTY
        ELSE 0
    END ) AS DELIV_BLK_QTY,
    SUM( CASE
        WHEN DLR.REJ_DT IS NOT NULL OR ( SDSL.SCHD_LN_DELIV_BLK_CD = 'YF' AND R.PLN_MATL_AVAIL_DT < R.RESCHD_DT )
            THEN R.CNFRM_QTY
        ELSE 0
    END ) AS POLICY_QTY,
    SUM( CASE
        WHEN R.PLN_MATL_AVAIL_DT < R.RESCHD_DT AND SD.CUST_GRP_ID_2 = 'MAN' AND R.PLN_MATL_AVAIL_DT < R.RESCHD_DT  -- PAUL CHECKS FOR CUST_GRP2_CD OFF OF THE CUST HIERARCHY
            THEN R.CNFRM_QTY
        ELSE 0
    END ) AS MAD_IN_PAST_MAN_QTY,
    SUM( CASE
        WHEN R.PLN_MATL_AVAIL_DT < R.RESCHD_DT AND SD.CUST_GRP_ID_2 <> 'MAN' AND SDSL.SCHD_LN_DELIV_BLK_CD IS NULL
            THEN R.CNFRM_QTY
        ELSE 0
    END ) AS MAD_IN_PAST_SUPPLY_QTY,
    SUM( CASE
        WHEN R.RESCHD_MATL_AVAIL_DT IS NOT NULL AND R.PLN_MATL_AVAIL_DT IS NOT NULL AND R.CNFRM_QTY > R.RESCHD_CNFRM_QTY
            THEN ( R.CNFRM_QTY - R.RESCHD_CNFRM_QTY )
        ELSE 0
    END ) AS SUM_QTY_DECREASED,
    SUM( CASE
        WHEN R.RESCHD_MATL_AVAIL_DT IS NOT NULL AND R.PLN_MATL_AVAIL_DT IS NOT NULL AND R.CNFRM_QTY < R.RESCHD_CNFRM_QTY
            THEN ( R.RESCHD_CNFRM_QTY - R.CNFRM_QTY )
        ELSE 0
    END ) AS SUM_QTY_INCREASED,
    SUM( CASE
        WHEN R.PLN_MATL_AVAIL_DT > R.RESCHD_MATL_AVAIL_DT AND R.PLN_DELIV_DT IS NOT NULL
            THEN ( CASE
                WHEN R.CNFRM_QTY > R.RESCHD_CNFRM_QTY
                    THEN R.RESCHD_CNFRM_QTY
                ELSE R.CNFRM_QTY
            END )
        ELSE 0
    END ) AS DATE_IMPROVED_QTY,
    SUM( CASE
        WHEN R.PLN_MATL_AVAIL_DT < R.RESCHD_MATL_AVAIL_DT AND R.PLN_DELIV_DT IS NOT NULL
            THEN ( CASE
                WHEN R.CNFRM_QTY > R.RESCHD_CNFRM_QTY
                    THEN R.RESCHD_CNFRM_QTY
                ELSE R.CNFRM_QTY
            END )
        ELSE 0
    END ) AS DATE_PUSH_QTY,
    SUM( CASE
        WHEN R.PLN_DELIV_DT IS NULL
            THEN R.RESCHD_CNFRM_QTY
        ELSE 0
    END ) AS ADDED_QTY,
    SUM( CASE
        WHEN R.RESCHD_DELIV_DT IS NULL
            THEN R.CNFRM_QTY
        ELSE 0
    END ) AS DELETED_QTY,
    CASE
        WHEN TOT_CNFRM_QTY > TOT_RESCHD_CNFRM_QTY AND TOT_CNFRM_QTY <= MAX( ZEROIFNULL( OO.TOTAL_OPEN_QTY ) )
            THEN ( TOT_CNFRM_QTY - TOT_RESCHD_CNFRM_QTY )
        ELSE 0
    END AS CNFRM_DECR_QTY,
    CASE
        WHEN TOT_CNFRM_QTY < TOT_RESCHD_CNFRM_QTY
            THEN ( TOT_RESCHD_CNFRM_QTY - TOT_CNFRM_QTY )
        ELSE 0
    END AS CNFRM_INCR_QTY,
    CASE
        WHEN SCHED_LINE_CNT = 1
            THEN DATE_IMPROVED_QTY
        WHEN SCHED_LINE_CNT = 2
            THEN ( CASE
                WHEN MAX_RESCHD_MAD < MAX_PLN_MAD AND DATE_PUSH_QTY = 0 AND ( SUM_QTY_DECREASED <> SUM_QTY_INCREASED  OR DATE_IMPROVED_QTY > 0 )
                    THEN ( DATE_IMPROVED_QTY + SUM_QTY_INCREASED + ADDED_QTY )
                ELSE ( CASE
                    WHEN MAX_PLN_MAD = MAX_RESCHD_MAD AND DATE_IMPROVED_QTY = 0
                        THEN SUM_QTY_INCREASED
                    ELSE DATE_IMPROVED_QTY
                END )
            END )
        ELSE ( CASE
            WHEN MAX_DATE_QTY_DELETED > MAX_DATE_QTY_INCREASED
                THEN ( CASE
                    WHEN ( DELETED_QTY + SUM_QTY_DECREASED ) > SUM_QTY_INCREASED
                        THEN ( SUM_QTY_INCREASED + DATE_IMPROVED_QTY )
                    ELSE ( DATE_IMPROVED_QTY + DELETED_QTY )
                END )
            ELSE ( CASE
                WHEN MAX_DATE_QTY_INCREASED > MAX_DATE_QTY_DECREASED AND ( SUM_QTY_INCREASED + ADDED_QTY ) = ( SUM_QTY_DECREASED + DELETED_QTY ) AND MAX_RESCHD_MAD < MAX_PLN_MAD
                    THEN DATE_IMPROVED_QTY
                ELSE ( CASE
                    WHEN MAX_RESCHD_MAD < MAX_PLN_MAD
                        THEN ( DATE_IMPROVED_QTY + SUM_QTY_DECREASED )
                    ELSE DATE_IMPROVED_QTY
                END )
            END )
        END )
    END AS CONFIRM_DATE_IMPR_QTY,
    CASE
        WHEN SCHED_LINE_CNT = 1
            THEN DATE_PUSH_QTY
        ELSE ( CASE
            WHEN SCHED_LINE_CNT = 2
                THEN ( CASE
                    WHEN MAX_RESCHD_MAD > MAX_PLN_MAD
                        THEN ( DATE_PUSH_QTY + SUM_QTY_DECREASED + DELETED_QTY )
                    ELSE DATE_PUSH_QTY
                END )
            ELSE ( CASE
                WHEN MAX_DATE_QTY_ADDED > MAX_DATE_QTY_DECREASED
                    THEN ( CASE
                        WHEN ADDED_QTY >= SUM_QTY_DECREASED AND MAX_RESCHD_MAD > MAX_PLN_MAD
                            THEN ( SUM_QTY_DECREASED + DATE_PUSH_QTY )
                        ELSE ( CASE
                            WHEN ( MAX_RESCHD_MAD > MAX_PLN_MAD OR ADDED_QTY = SUM_QTY_DECREASED )
                                THEN DATE_PUSH_QTY
                            ELSE ( CASE
                                WHEN MAX_RESCHD_MAD > MAX_PLN_MAD
                                    THEN ( DATE_PUSH_QTY + ADDED_QTY )
                                ELSE 0
                            END )
                        END )
                    END )
                ELSE ( CASE
                    WHEN MAX_DATE_QTY_INCREASED > MAX_DATE_QTY_DECREASED AND ( SUM_QTY_INCREASED + ADDED_QTY ) = ( SUM_QTY_DECREASED + DELETED_QTY ) AND MAX_RESCHD_MAD > MAX_PLN_MAD
                        THEN ( SUM_QTY_INCREASED + DATE_PUSH_QTY )
                    ELSE ( CASE
                        WHEN SUM_QTY_DECREASED < SUM_QTY_INCREASED AND SUM_QTY_DECREASED > 0 AND MAX_RESCHD_MAD > MAX_PLN_MAD
                            THEN ( CASE
                                WHEN ( SUM_QTY_INCREASED + ADDED_QTY ) = ( SUM_QTY_DECREASED + DELETED_QTY )
                                    THEN ( DATE_PUSH_QTY + DELETED_QTY )
                                ELSE ( SUM_QTY_DECREASED + DATE_PUSH_QTY )
                            END )
                        ELSE ( CASE
                            WHEN MAX_RESCHD_MAD > MAX_PLN_MAD AND SUM_QTY_DECREASED = SUM_QTY_INCREASED
                                THEN SUM_QTY_INCREASED
                            ELSE ( CASE
                                WHEN MAX_DATE_QTY_INCREASED > MAX_DATE_QTY_DECREASED
                                    THEN ( CASE
                                        WHEN SUM_QTY_DECREASED = SUM_QTY_INCREASED
                                            THEN SUM_QTY_INCREASED
                                        ELSE ( DATE_PUSH_QTY + SUM_QTY_DECREASED )
                                    END )
                                ELSE 0
                            END )
                        END )
                    END )
                END )
            END )
        END )
    END AS CONFIRM_DATE_PUSH_QTY,

    CASE
        WHEN ( DELIV_BLK_QTY + POLICY_QTY + MAD_IN_PAST_MAN_QTY + MAD_IN_PAST_SUPPLY_QTY ) <= CONFIRM_DATE_PUSH_QTY
            THEN ( CONFIRM_DATE_PUSH_QTY - ( DELIV_BLK_QTY + POLICY_QTY + MAD_IN_PAST_MAN_QTY + MAD_IN_PAST_SUPPLY_QTY ) )
        ELSE CONFIRM_DATE_PUSH_QTY
    END AS ADJ_CONFIRM_DATE_PUSH_QTY,
    CASE
        WHEN DELIV_BLK_QTY > CONFIRM_DATE_PUSH_QTY
            THEN CONFIRM_DATE_PUSH_QTY
        ELSE DELIV_BLK_QTY
    END AS ADJ_DELIV_BLK_QTY,
    CASE
        WHEN POLICY_QTY > CONFIRM_DATE_PUSH_QTY
            THEN CONFIRM_DATE_PUSH_QTY
        ELSE POLICY_QTY
    END AS ADJ_POLICY_QTY,
    CASE
        WHEN MAD_IN_PAST_MAN_QTY > CONFIRM_DATE_PUSH_QTY
            THEN CONFIRM_DATE_PUSH_QTY
        ELSE MAD_IN_PAST_MAN_QTY
    END AS ADJ_MAD_IN_PAST_MAN_QTY,
    CASE
        WHEN MAD_IN_PAST_SUPPLY_QTY > CONFIRM_DATE_PUSH_QTY
            THEN CONFIRM_DATE_PUSH_QTY
        ELSE MAD_IN_PAST_SUPPLY_QTY
    END AS ADJ_MAD_IN_PAST_SUPPLY_QTY

FROM NA_BI_VWS.ORD_RESCHD R

    INNER JOIN NA_BI_VWS.NAT_SLS_DOC SD
        ON SD.SLS_DOC_ID = R.ORDER_ID
        AND R.PRIOR_DY_RESCHD_DT BETWEEN SD.EFF_DT AND SD.EXP_DT
        AND SD.CUST_PRCH_ORD_TYP_CD <> 'RO'
        AND SD.SLS_DOC_TYP_CD NOT IN ( 'ZLS', 'ZLZ' )
        AND SD.ORIG_SYS_ID = 2
        AND SD.DOC_DT IN ( SELECT C.DAY_DATE FROM GDYR_VWS.GDYR_CAL C WHERE C.MONTH_DT BETWEEN CAST( '2014-01-01' AS DATE ) AND CURRENT_DATE )

    INNER JOIN NA_BI_VWS.NAT_SLS_DOC_SCHD_LN SDSL
        ON SDSL.SLS_DOC_ID = R.ORDER_ID
        AND SDSL.SLS_DOC_ITM_ID = R.ORDER_LINE_NBR
        AND SDSL.SCHD_LN_ID = R.SCHED_LINE_NBR
        AND R.PRIOR_DY_RESCHD_DT BETWEEN SDSL.EFF_DT AND SDSL.EXP_DT
        AND SDSL.ORIG_SYS_ID = 2

    LEFT OUTER JOIN (
                SELECT
                    D.ORDER_ID,
                    D.ORDER_LINE_NBR,
                    D.REJ_DT
                FROM GDYR_VWS.DELIV_LINE_REJ D
                WHERE
                    D.ORIG_SYS_ID = 2
                    AND D.QTY_TO_SHIP > 0
                GROUP BY
                    D.ORDER_ID,
                    D.ORDER_LINE_NBR,
                    D.REJ_DT
            ) DLR
        ON DLR.ORDER_ID = R.ORDER_ID
        AND DLR.ORDER_LINE_NBR = R.ORDER_LINE_NBR
        AND DLR.REJ_DT = R.PRIOR_DY_RESCHD_DT

    LEFT OUTER JOIN (
            SELECT
                OPN.ORDER_ID,
                OPN.ORDER_LINE_NBR,
                OPN.EFF_DT,
                OPN.EXP_DT,
                SUM( CASE WHEN OPN.OPEN_ORDER_STATUS_CD = 'B' THEN OPN.OPEN_ORDER_QTY ELSE 0 END ) AS BACK_ORD_QTY,
                SUM( CASE WHEN OPN.OPEN_ORDER_STATUS_CD = 'U' THEN OPN.OPEN_ORDER_QTY ELSE 0 END ) AS UNCNFRM_QTY,
                SUM( CASE WHEN OPN.OPEN_ORDER_STATUS_CD = 'C' THEN OPN.OPEN_ORDER_QTY ELSE 0 END ) AS OPEN_CNFRM_QTY,
                SUM( CASE WHEN OPN.OPEN_ORDER_STATUS_CD NOT IN ( 'B', 'U', 'C' ) THEN OPN.OPEN_ORDER_QTY ELSE 0 END ) AS OTHR_OPEN_QTY,
                SUM( OPN.OPEN_ORDER_QTY ) AS TOTAL_OPEN_QTY
            FROM GDYR_VWS.OPEN_ORDER OPN
            WHERE
                OPN.ORIG_SYS_ID = 2
            GROUP BY
                OPN.ORDER_ID,
                OPN.ORDER_LINE_NBR,
                OPN.EFF_DT,
                OPN.EXP_DT
            ) OO
        ON OO.ORDER_ID = R.ORDER_ID
        AND OO.ORDER_LINE_NBR = R.ORDER_LINE_NBR
        AND R.PRIOR_DY_RESCHD_DT BETWEEN OO.EFF_DT AND OO.EXP_DT

WHERE
    R.ORIG_SYS_ID = 2
    AND R.CMN_OWN_CUST_ID <> '00A0005538' -- COWD
    AND R.PBU_NBR IN ( '01', '03' )
    AND NOT ( R.CMN_OWN_CUST_ID = '00A0000632' AND SUBSTR( SD.CUST_PRCH_ORD_ID, 5, 2 ) <> '62' ) -- EXCLUDE SAM'S KIOSK ORDERS
    AND R.SHIP_TO_CUST_ID IN (
            SELECT
                C.SHIP_TO_CUST_ID
            FROM GDYR_BI_VWS.NAT_CUST_HIER_DESCR_EN_CURR C
            WHERE
                C.CUST_GRP_ID <> '3R'
                AND C.OWN_CUST_ID <> '00A0005538' -- COWD
        )
    AND R.MATL_ID IN (
            SELECT
                M.MATL_ID
            FROM GDYR_BI_VWS.NAT_MATL_HIER_DESCR_EN_CURR M
            WHERE
                M.EXT_MATL_GRP_ID = 'TIRE'
                AND M.PBU_NBR IN ( '01', '03' )
        )

GROUP BY
    R.ORDER_ID,
    R.ORDER_LINE_NBR,

    -- SHIP TO FOREIGN KEY & COMMON OWNER
    R.CMN_OWN_CUST_ID,
    R.SHIP_TO_CUST_ID,

    -- MATERIAL DETAILS
    R.MATL_ID,
    R.PBU_NBR,

    -- COUNT OF SCHEDULE LINES & MOST IMPORTANT DATES
    R.RESCHD_DT,
    R.PRIOR_DY_RESCHD_DT,

    -- NEW CATEGORIES
    R.DOC_TYP_CD,
    R.TRANS_UPD_CD,
    R.SRC_UPD_USR_ID,

    -- ORDER LINE LEVEL MATERIAL QTY
    OO.BACK_ORD_QTY,
    OO.UNCNFRM_QTY,
    OO.OPEN_CNFRM_QTY,
    OO.OTHR_OPEN_QTY

    ) RES

GROUP BY
    RES.RESCHD_DT,
    RES.PBU_NBR
